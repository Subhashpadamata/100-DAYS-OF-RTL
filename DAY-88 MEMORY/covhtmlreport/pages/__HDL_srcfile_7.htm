
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-w>class</q-w> mem_gen;
<a name="2"><q-n>     2  </q-n></a>	mem_tx tx,tx_t;
<a name="3"><q-n>     3  </q-n></a>	mem_tx txq[$];
<a name="4"><q-n>     4  </q-n></a>	<q-w>int</q-w> num;
<a name="5"><q-n>     5  </q-n></a>
<a name="6"><q-n>     6  </q-n></a>	<q-w>function</q-w> <q-w>new</q-w>(<q-w>int</q-w> num=0);
<a name="7"><q-n>     7  </q-n></a>		$display(<q-l>"gen from agent[%0d]"</q-l>,num);
<a name="8"><q-n>     8  </q-n></a>		<q-w>this</q-w>.num=num;
<a name="9"><q-n>     9  </q-n></a>	<q-w>endfunction</q-w>
<a name="10"><q-n>     10  </q-n></a>	<q-w>task</q-w> run();
<a name="11"><q-n>     11  </q-n></a>		<q-w>case</q-w>(common::testname)
<a name="12"><q-n>     12  </q-n></a>			<q-l>"wr_rd_test"</q-l>:<q-w>begin</q-w>
<a name="13"><q-n>     13  </q-n></a>				tx=<q-w>new</q-w>();
<a name="14"><q-n>     14  </q-n></a>				<q-w>assert</q-w>(tx.randomize()<q-w>with</q-w>{tx.wr_rd==1;}); <q-m>//write tx</q-m>
<a name="15"><q-n>     15  </q-n></a>				tx_t=<q-w>new</q-w> tx;
<a name="16"><q-n>     16  </q-n></a>				common::gen2bfm.put(tx);
<a name="17"><q-n>     17  </q-n></a>				tx=<q-w>new</q-w>();
<a name="18"><q-n>     18  </q-n></a>				<q-w>assert</q-w>(tx.randomize()<q-w>with</q-w>{tx.wr_rd==0;tx.addr==tx_t.addr;}); <q-m>//read tx</q-m>
<a name="19"><q-n>     19  </q-n></a>				common::gen2bfm.put(tx);
<a name="20"><q-n>     20  </q-n></a>			<q-w>end</q-w>
<a name="21"><q-n>     21  </q-n></a>			<q-l>"n_wr_rd_test"</q-l>:<q-w>begin</q-w>
<a name="22"><q-n>     22  </q-n></a>				<q-w>repeat</q-w>(common::num_tx)<q-w>begin</q-w>
<a name="23"><q-n>     23  </q-n></a>					tx=<q-w>new</q-w>();
<a name="24"><q-n>     24  </q-n></a>					<q-w>assert</q-w>(tx.randomize()<q-w>with</q-w>{tx.wr_rd==1;}); <q-m>//write tx</q-m>
<a name="25"><q-n>     25  </q-n></a>					tx_t=<q-w>new</q-w> tx;
<a name="26"><q-n>     26  </q-n></a>					common::gen2bfm.put(tx);
<a name="27"><q-n>     27  </q-n></a>					tx=<q-w>new</q-w>();
<a name="28"><q-n>     28  </q-n></a>					<q-w>assert</q-w>(tx.randomize()<q-w>with</q-w>{tx.wr_rd==0;tx.addr==tx_t.addr;}); <q-m>//read tx</q-m>
<a name="29"><q-n>     29  </q-n></a>					common::gen2bfm.put(tx);
<a name="30"><q-n>     30  </q-n></a>				<q-w>end</q-w>
<a name="31"><q-n>     31  </q-n></a>			<q-w>end</q-w>
<a name="32"><q-n>     32  </q-n></a>			<q-l>"n_wr_n_rd_test"</q-l>:<q-w>begin</q-w>
<a name="33"><q-n>     33  </q-n></a>				<q-w>repeat</q-w>(common::num_tx)<q-w>begin</q-w><q-m>//generating write txs</q-m>
<a name="34"><q-n>     34  </q-n></a>					tx=<q-w>new</q-w>();
<a name="35"><q-n>     35  </q-n></a>					<q-w>assert</q-w>(tx.randomize()<q-w>with</q-w>{tx.wr_rd==1;}); <q-m>//write tx</q-m>
<a name="36"><q-n>     36  </q-n></a>					tx_t=<q-w>new</q-w> tx;
<a name="37"><q-n>     37  </q-n></a>					txq.push_back(tx_t);
<a name="38"><q-n>     38  </q-n></a>					common::gen2bfm.put(tx);
<a name="39"><q-n>     39  </q-n></a>				<q-w>end</q-w>
<a name="40"><q-n>     40  </q-n></a>				<q-w>repeat</q-w>(common::num_tx)<q-w>begin</q-w><q-m>//generating read txs</q-m>
<a name="41"><q-n>     41  </q-n></a>					tx=<q-w>new</q-w>();
<a name="42"><q-n>     42  </q-n></a>					tx_t=txq.pop_front();
<a name="43"><q-n>     43  </q-n></a>					<q-w>assert</q-w>(tx.randomize()<q-w>with</q-w>{tx.wr_rd==0;tx.addr==tx_t.addr;}); <q-m>//read tx</q-m>
<a name="44"><q-n>     44  </q-n></a>					common::gen2bfm.put(tx);
<a name="45"><q-n>     45  </q-n></a>				<q-w>end</q-w>
<a name="46"><q-n>     46  </q-n></a>			<q-w>end</q-w>
<a name="47"><q-n>     47  </q-n></a>		<q-w>endcase</q-w>
<a name="48"><q-n>     48  </q-n></a>	<q-w>endtask</q-w>
<a name="49"><q-n>     49  </q-n></a><q-w>endclass</q-w>
</pre>
</tt>

  
</body>
</html>
